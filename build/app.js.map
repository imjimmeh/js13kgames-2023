{
  "version": 3,
  "sources": ["../src/ecs/core/component.ts", "../src/ecs/additions/components/controlled-by.ts", "../src/ecs/additions/components/position.ts", "../src/ecs/additions/components/movement.ts", "../src/ecs/additions/components/colour.ts", "../src/ecs/additions/components/size.ts", "../src/ecs/additions/shape-factory.ts", "../src/ecs/core/system.ts", "../src/ecs/additions/systems/input.ts", "../src/ecs/additions/systems/movement.ts", "../src/ecs/core/renderer.ts", "../src/ecs/additions/systems/renderer.ts", "../src/ecs/core/engine.ts", "../src/ecs/core/entity-components.ts", "../src/ecs/core/entity.ts", "../src/ecs-testing/testing.ts"],
  "sourcesContent": ["export abstract class Component implements ComponentFields {\r\n  name: string;\r\n\r\n  constructor({ name }: ComponentFields) {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\ntype ComponentFields = {\r\n  name: string;\r\n};\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport class ControlledByComponent extends Component {\r\n  controlledBy: ControlledBy;\r\n\r\n  constructor(controlledBy: ControlledBy) {\r\n    super({ name: \"ControlledBy\" });\r\n    this.controlledBy = controlledBy;\r\n  }\r\n}\r\n\r\nexport enum ControlledBy {\r\n  Player = \"Player\",\r\n  AI = \"AI\",\r\n}\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport class Position extends Component implements IPosition {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor({ x, y }: Partial<Position>) {\r\n    super({ name: \"Position\" });\r\n\r\n    this.x = x ?? 0;\r\n    this.y = y ?? 0;\r\n  }\r\n}\r\n\r\nexport interface IPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n", "import { Component } from \"../../core/component\";\r\nimport { Position } from \"./position\";\r\n\r\nexport class Movement extends Component {\r\n  vector: Position;\r\n  speed: Position;\r\n\r\n  constructor({ vector, speed }: Partial<Movement>) {\r\n    super({ name: \"Movement\" });\r\n    this.vector = vector ?? new Position({ x: 0, y: 0 });\r\n    this.speed = speed ?? new Position({ x: 0, y: 0 });\r\n  }\r\n}\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport interface IColour {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n}\r\n\r\nexport class Colour extends Component implements IColour {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n\r\n  constructor({ r, g, b, a }: IColour) {\r\n    super({ name: \"Colour\" });\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n    this.a = a;\r\n\r\n    this.toRgb = this.toRgb.bind(this);\r\n  }\r\n\r\n  toRgb = (): string => `rgb(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\r\n}\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class Size extends Component implements ISize {\r\n  width: number;\r\n  height: number;\r\n\r\n  constructor({ width, height }: ISize) {\r\n    super({ name: \"Size\" });\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n}\r\n", "import { Colour } from \"./components/colour\";\r\nimport { Position } from \"./components/position\";\r\nimport { Size } from \"./components/size\";\r\n\r\nfunction* createRectangle() {\r\n  yield new Colour({ r: 255, g: 0, b: 0, a: 255 });\r\n  yield new Position({ x: 0, y: 0 });\r\n  yield new Size({ width: 200, height: 200 });\r\n}\r\n\r\nexport { createRectangle };\r\n", "import { IEngine } from \"./engine\";\r\nimport { Entity } from \"./entity\";\r\n\r\nexport abstract class System {\r\n  abstract accepts(entity: Entity): boolean;\r\n\r\n  abstract init(): void;\r\n\r\n  abstract update({ entities, systems }: IEngine): void;\r\n\r\n  getAcceptedEntities(entities: Entity[]): IterableIterator<Entity> {\r\n    return getEntitiesForQuery(entities, this);\r\n  }\r\n}\r\n\r\nconst getEntitiesForQuery = function* (\r\n  entities: Entity[],\r\n  system: System\r\n): IterableIterator<Entity> {\r\n  for (const entity of entities) {\r\n    if (system.accepts(entity)) {\r\n      yield entity;\r\n    }\r\n  }\r\n};\r\n", "import { IEngine } from \"../../core/engine\";\r\nimport { Entity } from \"../../core/entity\";\r\nimport { System } from \"../../core/system\";\r\nimport {\r\n  ControlledBy,\r\n  ControlledByComponent,\r\n} from \"../components/controlled-by\";\r\nimport { Movement } from \"../components/movement\";\r\n\r\nexport class InputSystem extends System {\r\n  keyStates: Map<string, KeyState> = new Map<string, KeyState>();\r\n\r\n  constructor() {\r\n    super();\r\n    this.init = this.init.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n  }\r\n\r\n  accepts(entity: Entity): boolean {\r\n    const component =\r\n      entity.components.get<ControlledByComponent>(\"ControlledBy\");\r\n\r\n    if (!component) return false;\r\n\r\n    return (\r\n      component.controlledBy == ControlledBy.Player &&\r\n      entity.components.has(\"Movement\")\r\n    );\r\n  }\r\n\r\n  init(): void {\r\n    document.addEventListener(\"keydown\", this.onKeyDown);\r\n    document.addEventListener(\"keyup\", this.onKeyUp);\r\n  }\r\n\r\n  update({ entities }: IEngine): void {\r\n    for (const state of this.keyStates) {\r\n      if (state[1] == KeyState.Pressed) {\r\n        this.keyStates.set(state[0], KeyState.Held);\r\n      }\r\n    }\r\n\r\n    const xDirection = this.getAxisVector(\"ArrowLeft\", \"ArrowRight\");\r\n    const yDirection = this.getAxisVector(\"ArrowUp\", \"ArrowDown\");\r\n\r\n    for (const entity of this.getAcceptedEntities(entities)) {\r\n      const movement = entity.components.get<Movement>(\"Movement\");\r\n      movement!.vector.y = yDirection;\r\n      movement!.vector.x = xDirection;\r\n    }\r\n  }\r\n\r\n  private getAxisVector(positiveKey: string, negativeKey: string) {\r\n    const up =\r\n      (this.keyStates.get(positiveKey) ?? KeyState.Released) !=\r\n      KeyState.Released\r\n        ? 1\r\n        : 0;\r\n\r\n    const down =\r\n      (this.keyStates.get(negativeKey) ?? KeyState.Released) !=\r\n      KeyState.Released\r\n        ? -1\r\n        : 0;\r\n\r\n    return up + down;\r\n  }\r\n\r\n  onKeyDown(event: KeyboardEvent) {\r\n    this.keyStates.set(event.key, KeyState.Pressed);\r\n  }\r\n\r\n  onKeyUp(event: KeyboardEvent) {\r\n    this.keyStates.set(event.key, KeyState.Released);\r\n  }\r\n}\r\n\r\nenum KeyState {\r\n  Released = \"Released\",\r\n  Pressed = \"Pressed\",\r\n  Held = \"Held\",\r\n}\r\n", "import { IEngine } from \"../../core/engine\";\r\nimport { Entity } from \"../../core/entity\";\r\nimport { System } from \"../../core/system\";\r\nimport { Movement } from \"../components/movement\";\r\nimport { Position } from \"../components/position\";\r\n\r\nexport class MovementSystem extends System {\r\n  accepts(entity: Entity): boolean {\r\n    return (\r\n      entity.components.has(\"Position\") && entity.components.has(\"Movement\")\r\n    );\r\n  }\r\n\r\n  init(): void {}\r\n\r\n  update({ entities }: IEngine): void {\r\n    for (const entity of this.getAcceptedEntities(entities)) {\r\n      const position = entity.components.get<Position>(\"Position\")!;\r\n      const movement = entity.components.get<Movement>(\"Movement\")!;\r\n\r\n      //TODO: Calculate actual speed and use that\r\n      position.x += movement.vector.x;\r\n      position.y += movement.vector.y;\r\n    }\r\n  }\r\n}\r\n", "export class Renderer {\r\n  private _canvas: HTMLCanvasElement;\r\n  private _context: CanvasRenderingContext2D;\r\n\r\n  constructor() {\r\n    const canvas = document.querySelector(\"canvas\");\r\n\r\n    if (!canvas) throw \"Could not find canvas\";\r\n\r\n    this._canvas = canvas;\r\n    this._context = this._canvas.getContext(\"2d\")!;\r\n  }\r\n\r\n  get canvas(): HTMLCanvasElement {\r\n    return this._canvas;\r\n  }\r\n\r\n  get context(): CanvasRenderingContext2D {\r\n    return this._context;\r\n  }\r\n\r\n  init() {\r\n    this._canvas.width = window.innerWidth;\r\n    this._canvas.height = window.innerHeight;\r\n  }\r\n\r\n  clearCanvas() {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n}\r\n\r\nexport const instance = new Renderer();\r\n", "import { IEngine } from \"../../core/engine\";\r\nimport { Entity } from \"../../core/entity\";\r\nimport { instance } from \"../../core/renderer\";\r\nimport { System } from \"../../core/system\";\r\nimport { Colour } from \"../components/colour\";\r\nimport { Position } from \"../components/position\";\r\nimport { Size } from \"../components/size\";\r\n\r\nconst shapeRendererUpdate = (entity: Entity): void => {\r\n  const size = entity.components.get<Size>(\"Size\");\r\n  const position = entity.components.get<Position>(\"Position\");\r\n  const colour = entity.components.get<Colour>(\"Colour\");\r\n\r\n  instance.context.fillStyle = colour!.toRgb();\r\n\r\n  instance.context.fillRect(\r\n    position!.x,\r\n    position!.y,\r\n    size!.width,\r\n    size!.height\r\n  );\r\n};\r\n\r\nexport class RendererSystem extends System {\r\n  accepts(entity: Entity): boolean {\r\n    return (\r\n      entity.components.has(\"Size\") &&\r\n      entity.components.has(\"Position\") &&\r\n      entity.components.has(\"Colour\")\r\n    );\r\n  }\r\n\r\n  init(): void {}\r\n  update({ entities }: IEngine): void {\r\n    instance.clearCanvas();\r\n\r\n    for (const entity of this.getAcceptedEntities(entities)) {\r\n      shapeRendererUpdate(entity);\r\n    }\r\n  }\r\n}\r\n", "import { Entity } from \"./entity\";\r\nimport { instance } from \"./renderer\";\r\nimport { System } from \"./system\";\r\n\r\nexport class Engine implements IEngine {\r\n  systems: System[] = [];\r\n  entities: Entity[] = [];\r\n\r\n  constructor() {\r\n    this.update = this.update.bind(this);\r\n  }\r\n\r\n  init() {\r\n    instance.init();\r\n\r\n    for (const entity of this.entities) {\r\n      entity.init();\r\n    }\r\n\r\n    for (const system of this.systems) {\r\n      system.init();\r\n    }\r\n\r\n    window.requestAnimationFrame(this.update);\r\n  }\r\n\r\n  update() {\r\n    for (const system of this.systems) {\r\n      system.update({ entities: this.entities, systems: this.systems });\r\n    }\r\n\r\n    console.log(`ran update`);\r\n\r\n    window.requestAnimationFrame(this.update);\r\n  }\r\n}\r\n\r\nexport interface IEngine {\r\n  systems: System[];\r\n  entities: Entity[];\r\n}\r\n", "import { Component } from \"./component\";\r\n\r\nexport class Components {\r\n  private components: Map<string, Component> = new Map<string, Component>();\r\n\r\n  add(component: Component): void {\r\n    this.components.set(component.name, component);\r\n  }\r\n\r\n  get<T extends Component>(name: string): T | undefined {\r\n    const component = this.components.get(name);\r\n    if (!component) return undefined;\r\n\r\n    return component as T;\r\n  }\r\n\r\n  has(name: string): boolean {\r\n    return this.components.has(name);\r\n  }\r\n\r\n  all(): IterableIterator<Component> {\r\n    return this.components.values();\r\n  }\r\n}\r\n", "import { Components } from \"./entity-components\";\r\n\r\nexport class Entity {\r\n  components: Components = new Components();\r\n  name: string = \"\";\r\n\r\n  init(): void {\r\n    for (const component of this.components.all()) {\r\n      console.log(component);\r\n    }\r\n\r\n    console.log(`initialised`, this);\r\n  }\r\n}\r\n", "import {\r\n  ControlledBy,\r\n  ControlledByComponent,\r\n} from \"../ecs/additions/components/controlled-by\";\r\nimport { Movement } from \"../ecs/additions/components/movement\";\r\nimport { createRectangle } from \"../ecs/additions/shape-factory\";\r\nimport { InputSystem } from \"../ecs/additions/systems/input\";\r\nimport { MovementSystem } from \"../ecs/additions/systems/movement\";\r\nimport { RendererSystem } from \"../ecs/additions/systems/renderer\";\r\nimport { Engine } from \"../ecs/core/engine\";\r\nimport { Entity } from \"../ecs/core/entity\";\r\n\r\nconst player = new Entity();\r\nplayer.name = \"Player\";\r\n\r\nfor (const component of createRectangle()) {\r\n  player.components.add(component);\r\n}\r\n\r\nplayer.components.add(new Movement({}));\r\nplayer.components.add(new ControlledByComponent(ControlledBy.Player));\r\n\r\nconst engine = new Engine();\r\nengine.entities.push(player);\r\nengine.systems.push(new InputSystem());\r\nengine.systems.push(new MovementSystem());\r\nengine.systems.push(new RendererSystem());\r\nengine.init();\r\n"],
  "mappings": "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",
  "names": ["Component", "name", "ControlledByComponent", "Component", "controlledBy", "Position", "Component", "x", "y", "Movement", "Component", "vector", "speed", "Position", "Colour", "Component", "r", "g", "b", "a", "Size", "Component", "width", "height", "createRectangle", "Colour", "Position", "Size", "System", "entities", "getEntitiesForQuery", "system", "entity", "InputSystem", "System", "entity", "component", "entities", "state", "xDirection", "yDirection", "movement", "positiveKey", "negativeKey", "up", "down", "event", "MovementSystem", "System", "entity", "entities", "position", "movement", "Renderer", "canvas", "instance", "shapeRendererUpdate", "entity", "size", "position", "colour", "instance", "RendererSystem", "System", "entities", "Engine", "instance", "entity", "system", "Components", "component", "name", "Entity", "Components", "component", "player", "Entity", "component", "createRectangle", "Movement", "ControlledByComponent", "engine", "Engine", "InputSystem", "MovementSystem", "RendererSystem"]
}
