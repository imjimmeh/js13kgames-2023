{
  "version": 3,
  "sources": ["../src/ecs/core/component.ts", "../src/ecs/additions/components/controlled-by.ts", "../src/ecs/helpers/maths.ts", "../src/ecs/helpers/maths-vectors.ts", "../src/ecs/additions/components/movement.ts", "../src/ecs/additions/components/colour.ts", "../src/ecs/additions/components/position.ts", "../src/ecs/additions/components/size.ts", "../src/ecs/additions/shape-factory.ts", "../src/ecs/core/system.ts", "../src/ecs/additions/systems/WebGlRenderer.ts", "../src/ecs/additions/systems/input.ts", "../src/ecs/additions/systems/movement.ts", "../src/ecs/core/renderer.ts", "../src/ecs/core/engine.ts", "../src/ecs/core/entity-components.ts", "../src/ecs/core/entity.ts", "../src/webgl/helpers/resize-canvas.ts", "../src/webgl/main.ts", "../src/webgl/material.ts", "../src/webgl/shader.ts", "../src/webgl/shaders/fragment.ts", "../src/webgl/shaders/vertex.ts", "../src/app.ts"],
  "sourcesContent": ["export abstract class Component implements ComponentFields {\r\n  name: string;\r\n\r\n  constructor({ name }: ComponentFields) {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\ntype ComponentFields = {\r\n  name: string;\r\n};\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport class ControlledByComponent extends Component {\r\n  controlledBy: ControlledBy;\r\n\r\n  constructor(controlledBy: ControlledBy) {\r\n    super({ name: \"ControlledBy\" });\r\n    this.controlledBy = controlledBy;\r\n  }\r\n}\r\n\r\nexport enum ControlledBy {\r\n  Player = \"Player\",\r\n  AI = \"AI\",\r\n}\r\n", "export const lerp = (start: number, end: number, factor: number) =>\r\n  (start + (end - start)) * factor;\r\n\r\nexport const approxZero = (n: number) => n < 0.00001 && n > -0.00001;\r\n", "import { Vector } from \"../additions/components/position\";\r\nimport { approxZero, lerp } from \"./maths\";\r\n\r\nexport const lerpVector = (a: Vector, b: Vector, factor: number): Vector => {\r\n  const x = lerp(a.x, b.x, factor);\r\n  const y = lerp(a.y, b.y, factor);\r\n\r\n  return {\r\n    x,\r\n    y,\r\n  };\r\n};\r\n\r\nexport const addVector = (a: Vector, b: Vector): Vector => {\r\n  return {\r\n    x: a.x + b.x,\r\n    y: a.y + b.y,\r\n  };\r\n};\r\n\r\nexport const multiplyVector = (a: Vector, b: number): Vector => {\r\n  return {\r\n    x: a.x * b,\r\n    y: a.y * b,\r\n  };\r\n};\r\n\r\nexport const approxZeroVector = ({ x, y }: Vector): boolean =>\r\n  approxZero(x) && approxZero(y);\r\n\r\nexport const clampVector = (v: Vector, min: number, max: number): Vector => {\r\n  return {\r\n    x: Math.min(Math.max(v.x, min), max),\r\n    y: Math.min(Math.max(v.y, min), max),\r\n  };\r\n};\r\n", "import { Component } from \"../../core/component\";\r\nimport { approxZero } from \"../../helpers/maths\";\r\nimport {\r\n  addVector,\r\n  approxZeroVector,\r\n  lerpVector,\r\n  multiplyVector,\r\n} from \"../../helpers/maths-vectors\";\r\nimport { Vector } from \"./position\";\r\n\r\nexport const MovementName = \"Movement\";\r\n\r\nexport class Movement extends Component {\r\n  vector: Vector;\r\n  acceleration: Vector = { x: 0, y: 0 };\r\n  velocity: Vector = { x: 0, y: 0 };\r\n  maxSpeed: number;\r\n\r\n  constructor({ vector, maxSpeed }: Partial<Movement>) {\r\n    super({ name: MovementName });\r\n    this.vector = vector ?? { x: 0, y: 0 };\r\n    this.maxSpeed = maxSpeed ?? 2;\r\n  }\r\n\r\n  updateSpeed() {\r\n    if (approxZero(this.vector.x)) {\r\n      this.velocity.x = 0;\r\n      this.acceleration.x = 0;\r\n    }\r\n    if (approxZero(this.vector.y)) {\r\n      this.velocity.y = 0;\r\n      this.acceleration.y = 0;\r\n    }\r\n\r\n    if (approxZeroVector(this.vector)) {\r\n      return;\r\n    }\r\n\r\n    this.acceleration = addVector(\r\n      this.acceleration,\r\n      multiplyVector(this.vector, 0.1)\r\n    );\r\n\r\n    this.velocity = lerpVector(\r\n      this.velocity,\r\n      addVector(this.velocity, this.acceleration),\r\n      1\r\n    );\r\n\r\n    const negativeMaxSpeed = this.maxSpeed * -1;\r\n\r\n    if (this.velocity.x > this.maxSpeed) {\r\n      this.velocity.x = this.maxSpeed;\r\n    } else if (this.velocity.x < negativeMaxSpeed) {\r\n      this.velocity.x = negativeMaxSpeed;\r\n    }\r\n\r\n    if (this.velocity.y > this.maxSpeed) {\r\n      this.velocity.y = this.maxSpeed;\r\n    } else if (this.velocity.y < negativeMaxSpeed) {\r\n      this.velocity.y = negativeMaxSpeed;\r\n    }\r\n  }\r\n}\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport interface IColour {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n}\r\n\r\nexport class Colour extends Component implements IColour {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n\r\n  constructor({ r, g, b, a }: IColour) {\r\n    super({ name: \"Colour\" });\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n    this.a = a;\r\n\r\n    this.toRgb = this.toRgb.bind(this);\r\n  }\r\n\r\n  toRgb = (): string => `rgb(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\r\n}\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport const PositionName = \"Position\";\r\n\r\nexport class Position extends Component implements Vector {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor({ x, y }: Partial<Position>) {\r\n    super({ name: PositionName });\r\n\r\n    this.x = x ?? 0;\r\n    this.y = y ?? 0;\r\n  }\r\n}\r\n\r\nexport type Vector = {\r\n  x: number;\r\n  y: number;\r\n};\r\n", "import { Component } from \"../../core/component\";\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class Size extends Component implements ISize {\r\n  width: number;\r\n  height: number;\r\n\r\n  constructor({ width, height }: ISize) {\r\n    super({ name: \"Size\" });\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n}\r\n", "import { Colour } from \"./components/colour\";\r\nimport { Position } from \"./components/position\";\r\nimport { Size } from \"./components/size\";\r\n\r\nfunction* createRectangle() {\r\n  yield new Colour({ r: 255, g: 0, b: 0, a: 255 });\r\n  yield new Position({ x: 0, y: 0 });\r\n  yield new Size({ width: 200, height: 200 });\r\n}\r\n\r\nexport { createRectangle };\r\n", "import { IEngine } from \"./engine\";\r\nimport { Entity } from \"./entity\";\r\n\r\nexport abstract class System {\r\n  abstract accepts(entity: Entity): boolean;\r\n\r\n  abstract init(): void;\r\n\r\n  abstract update({ entities, systems }: IEngine): void;\r\n\r\n  getAcceptedEntities(entities: Entity[]): IterableIterator<Entity> {\r\n    return getEntitiesForQuery(entities, this);\r\n  }\r\n}\r\n\r\nconst getEntitiesForQuery = function* (\r\n  entities: Entity[],\r\n  system: System\r\n): IterableIterator<Entity> {\r\n  for (const entity of entities) {\r\n    if (system.accepts(entity)) {\r\n      yield entity;\r\n    }\r\n  }\r\n};\r\n", "import { WebGl } from \"../../../webgl/main\";\r\nimport { IEngine } from \"../../core/engine\";\r\nimport { Entity } from \"../../core/entity\";\r\nimport { System } from \"../../core/system\";\r\nimport { PositionName } from \"../components/position\";\r\n\r\nexport class WebGlRenderer extends System {\r\n  webgl: WebGl;\r\n\r\n  constructor(webgl: WebGl) {\r\n    super();\r\n    this.webgl = webgl;\r\n  }\r\n\r\n  accepts(entity: Entity): boolean {\r\n    return (\r\n      entity.components.has(\"Size\") &&\r\n      entity.components.has(PositionName) &&\r\n      entity.components.has(\"Colour\")\r\n    );\r\n  }\r\n\r\n  init(): void {}\r\n\r\n  update({ entities, systems }: IEngine): void {\r\n    this.webgl.startDraw();\r\n\r\n    const drawableEntities = this.getAcceptedEntities(entities);\r\n\r\n    //TODO: move this to webgl class?\r\n    for (const material of this.webgl.materials) {\r\n      material.startDraw(this.webgl.gl);\r\n      material.draw(this.webgl.gl, drawableEntities);\r\n    }\r\n  }\r\n}\r\n", "import { IEngine } from \"../../core/engine\";\r\nimport { Entity } from \"../../core/entity\";\r\nimport { System } from \"../../core/system\";\r\nimport {\r\n  ControlledBy,\r\n  ControlledByComponent,\r\n} from \"../components/controlled-by\";\r\nimport { Movement, MovementName } from \"../components/movement\";\r\n\r\nexport class InputSystem extends System {\r\n  keyStates: Map<string, KeyState> = new Map<string, KeyState>();\r\n\r\n  constructor() {\r\n    super();\r\n    this.init = this.init.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n  }\r\n\r\n  accepts(entity: Entity): boolean {\r\n    const component =\r\n      entity.components.get<ControlledByComponent>(\"ControlledBy\");\r\n\r\n    if (!component) return false;\r\n\r\n    return (\r\n      component.controlledBy == ControlledBy.Player &&\r\n      entity.components.has(MovementName)\r\n    );\r\n  }\r\n\r\n  init(): void {\r\n    document.addEventListener(\"keydown\", this.onKeyDown);\r\n    document.addEventListener(\"keyup\", this.onKeyUp);\r\n  }\r\n\r\n  update({ entities }: IEngine): void {\r\n    for (const state of this.keyStates) {\r\n      if (state[1] == KeyState.Pressed) {\r\n        this.keyStates.set(state[0], KeyState.Held);\r\n      }\r\n    }\r\n\r\n    const xDirection = this.getAxisVector(\"ArrowRight\", \"ArrowLeft\");\r\n    const yDirection = this.getAxisVector(\"ArrowUp\", \"ArrowDown\");\r\n\r\n    for (const entity of this.getAcceptedEntities(entities)) {\r\n      const movement = entity.components.get<Movement>(MovementName);\r\n      movement!.vector.y = yDirection;\r\n      movement!.vector.x = xDirection;\r\n    }\r\n  }\r\n\r\n  private getAxisVector(positiveKey: string, negativeKey: string) {\r\n    const up =\r\n      (this.keyStates.get(positiveKey) ?? KeyState.Released) !=\r\n      KeyState.Released\r\n        ? 1\r\n        : 0;\r\n\r\n    const down =\r\n      (this.keyStates.get(negativeKey) ?? KeyState.Released) !=\r\n      KeyState.Released\r\n        ? -1\r\n        : 0;\r\n\r\n    return up + down;\r\n  }\r\n\r\n  onKeyDown(event: KeyboardEvent) {\r\n    this.keyStates.set(event.key, KeyState.Pressed);\r\n  }\r\n\r\n  onKeyUp(event: KeyboardEvent) {\r\n    this.keyStates.set(event.key, KeyState.Released);\r\n  }\r\n}\r\n\r\nenum KeyState {\r\n  Released = \"Released\",\r\n  Pressed = \"Pressed\",\r\n  Held = \"Held\",\r\n}\r\n", "import { IEngine } from \"../../core/engine\";\r\nimport { Entity } from \"../../core/entity\";\r\nimport { System } from \"../../core/system\";\r\nimport { Movement, MovementName } from \"../components/movement\";\r\nimport { Position, PositionName } from \"../components/position\";\r\n\r\nexport class MovementSystem extends System {\r\n  accepts(entity: Entity): boolean {\r\n    return (\r\n      entity.components.has(PositionName) && entity.components.has(MovementName)\r\n    );\r\n  }\r\n\r\n  init(): void {}\r\n\r\n  update({ entities }: IEngine): void {\r\n    for (const entity of this.getAcceptedEntities(entities)) {\r\n      const position = entity.components.get<Position>(PositionName)!;\r\n      const movement = entity.components.get<Movement>(MovementName)!;\r\n\r\n      movement.updateSpeed();\r\n\r\n      position.x += movement.acceleration.x;\r\n      position.y += movement.acceleration.y;\r\n    }\r\n  }\r\n}\r\n", "export class Renderer {\r\n  private _canvas: HTMLCanvasElement;\r\n  private _context: CanvasRenderingContext2D;\r\n\r\n  constructor() {\r\n    const canvas = document.querySelector(\"canvas\");\r\n\r\n    if (!canvas) throw \"Could not find canvas\";\r\n\r\n    this._canvas = canvas;\r\n    this._context = this._canvas.getContext(\"2d\")!;\r\n  }\r\n\r\n  get canvas(): HTMLCanvasElement {\r\n    return this._canvas;\r\n  }\r\n\r\n  get context(): CanvasRenderingContext2D {\r\n    return this._context;\r\n  }\r\n\r\n  init() {\r\n    this._canvas.width = window.innerWidth;\r\n    this._canvas.height = window.innerHeight;\r\n  }\r\n\r\n  clearCanvas() {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n}\r\n\r\nlet _instance: Renderer | null = null;\r\n\r\nexport const instance = (): Renderer => {\r\n  if (!_instance) {\r\n    _instance = new Renderer();\r\n  }\r\n\r\n  return _instance;\r\n};\r\n", "import { Entity } from \"./entity\";\r\nimport { instance } from \"./renderer\";\r\nimport { System } from \"./system\";\r\n\r\nexport class Engine implements IEngine {\r\n  systems: System[] = [];\r\n  entities: Entity[] = [];\r\n\r\n  constructor() {\r\n    this.update = this.update.bind(this);\r\n  }\r\n\r\n  init() {\r\n    instance().init();\r\n\r\n    for (const entity of this.entities) {\r\n      entity.init();\r\n    }\r\n\r\n    for (const system of this.systems) {\r\n      system.init();\r\n    }\r\n\r\n    window.requestAnimationFrame(this.update);\r\n  }\r\n\r\n  update() {\r\n    for (const system of this.systems) {\r\n      system.update({ entities: this.entities, systems: this.systems });\r\n    }\r\n\r\n    console.log(`ran update`);\r\n\r\n    window.requestAnimationFrame(this.update);\r\n  }\r\n}\r\n\r\nexport interface IEngine {\r\n  systems: System[];\r\n  entities: Entity[];\r\n}\r\n", "import { Component } from \"./component\";\r\n\r\nexport class Components {\r\n  private components: Map<string, Component> = new Map<string, Component>();\r\n\r\n  add(component: Component): void {\r\n    this.components.set(component.name, component);\r\n  }\r\n\r\n  get<T extends Component>(name: string): T | undefined {\r\n    const component = this.components.get(name);\r\n    if (!component) return undefined;\r\n\r\n    return component as T;\r\n  }\r\n\r\n  has(name: string): boolean {\r\n    return this.components.has(name);\r\n  }\r\n\r\n  all(): IterableIterator<Component> {\r\n    return this.components.values();\r\n  }\r\n}\r\n", "import { Components } from \"./entity-components\";\r\n\r\nexport class Entity {\r\n  components: Components = new Components();\r\n  name: string = \"\";\r\n\r\n  init(): void {\r\n    for (const component of this.components.all()) {\r\n      console.log(component);\r\n    }\r\n\r\n    console.log(`initialised`, this);\r\n  }\r\n}\r\n", "export const resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement) => {\r\n  // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n  const dpr = window.devicePixelRatio;\r\n  const { width, height } = canvas.getBoundingClientRect();\r\n  const displayWidth = Math.round(width * dpr);\r\n  const displayHeight = Math.round(height * dpr);\r\n\r\n  // Check if the canvas is not the same size.\r\n  const needResize =\r\n    canvas.width != displayWidth || canvas.height != displayHeight;\r\n\r\n  if (needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n\r\n  return needResize;\r\n};\r\n", "import { resizeCanvasToDisplaySize } from \"./helpers/resize-canvas\";\r\nimport { Material } from \"./material\";\r\n\r\nexport class WebGl {\r\n  gl: WebGL2RenderingContext;\r\n  canvas: HTMLCanvasElement;\r\n\r\n  materials: Material[] = [];\r\n\r\n  constructor({\r\n    canvas,\r\n    materials,\r\n  }: {\r\n    canvas: HTMLCanvasElement;\r\n    materials: Material[];\r\n  }) {\r\n    this.canvas = canvas;\r\n\r\n    const gl = canvas.getContext(\"webgl2\");\r\n\r\n    if (!gl) throw `Could not find WebGL2 context`;\r\n\r\n    this.gl = gl;\r\n\r\n    this.materials = materials;\r\n  }\r\n\r\n  init() {\r\n    for (const material of this.materials) {\r\n      material.create(this.gl);\r\n    }\r\n  }\r\n\r\n  startDraw() {\r\n    resizeCanvasToDisplaySize(this.gl.canvas as HTMLCanvasElement);\r\n\r\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\r\n\r\n    this.gl.clearColor(0, 0, 0, 0);\r\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n  }\r\n}\r\n", "import { Colour } from \"../ecs/additions/components/colour\";\r\nimport { Position, PositionName } from \"../ecs/additions/components/position\";\r\nimport { Size } from \"../ecs/additions/components/size\";\r\nimport { Entity } from \"../ecs/core/entity\";\r\nimport { resizeCanvasToDisplaySize } from \"./helpers/resize-canvas\";\r\nimport { Shader } from \"./shader\";\r\n\r\nexport class Material {\r\n  private _program?: WebGLProgram;\r\n  private _positionLocation?: number;\r\n  private _resolutionLocation?: WebGLUniformLocation;\r\n  private _colourLocation?: WebGLUniformLocation;\r\n\r\n  readonly fragmentShader: Shader;\r\n  readonly vertexShader: Shader;\r\n  readonly name: string;\r\n\r\n  readonly variables: MaterialVar[];\r\n\r\n  constructor({\r\n    fragmentShader,\r\n    name,\r\n    vertexShader,\r\n    variables,\r\n  }: Partial<Material>) {\r\n    if (!fragmentShader || !vertexShader || !variables || !name)\r\n      throw `Shaders must exist`;\r\n\r\n    this.fragmentShader = fragmentShader;\r\n    this.vertexShader = vertexShader;\r\n    this.variables = variables;\r\n    this.name = name;\r\n  }\r\n\r\n  get colourLocation(): WebGLUniformLocation | undefined {\r\n    if (!this._colourLocation) {\r\n      this._colourLocation = this.variables.find(\r\n        (variable) => variable.name == VariableName.Colour\r\n      )?.location;\r\n    }\r\n\r\n    return this._colourLocation;\r\n  }\r\n\r\n  get positionLocation(): number | undefined {\r\n    if (!this._positionLocation) {\r\n      const position = this.variables.find(\r\n        (variable) => variable.name == VariableName.Position\r\n      );\r\n\r\n      if (!position) return undefined;\r\n\r\n      this._positionLocation = (position as AttributeMaterialVar).location;\r\n    }\r\n\r\n    return this._positionLocation;\r\n  }\r\n\r\n  get resolutionLocation(): WebGLUniformLocation | undefined {\r\n    if (!this._resolutionLocation) {\r\n      this._resolutionLocation = this.variables.find(\r\n        (variable) => variable.name == VariableName.Resolution\r\n      )?.location;\r\n    }\r\n\r\n    return this._resolutionLocation;\r\n  }\r\n\r\n  create(gl: WebGL2RenderingContext) {\r\n    this._createProgram(gl);\r\n    this._findVarLocations(gl);\r\n  }\r\n\r\n  startDraw(gl: WebGL2RenderingContext) {\r\n    const positionBuffer = gl.createBuffer();\r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n\r\n    gl.enableVertexAttribArray(this.positionLocation!);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n    const size = 2; // 2 components per iteration\r\n    const type = gl.FLOAT; // the data is 32bit floats\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n    const offset = 0; // start at the beginning of the buffer\r\n\r\n    gl.vertexAttribPointer(\r\n      this.positionLocation!,\r\n      size,\r\n      type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n\r\n    gl.useProgram(this._program!);\r\n    gl.bindVertexArray(vao);\r\n\r\n    gl.uniform2f(this.resolutionLocation!, gl.canvas.width, gl.canvas.height);\r\n  }\r\n\r\n  draw(gl: WebGL2RenderingContext, entities: IterableIterator<Entity>) {\r\n    for (const entity of entities) {\r\n      const size = entity.components.get<Size>(\"Size\")!;\r\n      const position = entity.components.get<Position>(PositionName)!;\r\n      const colour = entity.components.get<Colour>(\"Colour\")!;\r\n\r\n      const rectangle = createRectangle(\r\n        position.x,\r\n        position.y,\r\n        size.width,\r\n        size.height\r\n      );\r\n\r\n      gl.bufferData(gl.ARRAY_BUFFER, rectangle, gl.STATIC_DRAW);\r\n\r\n      // Set a random color.\r\n      gl.uniform4f(this.colourLocation!, colour.r, colour.g, colour.b, 1);\r\n\r\n      var primitiveType = gl.TRIANGLES;\r\n      var offset = 0;\r\n      var count = 6;\r\n      gl.drawArrays(primitiveType, offset, count);\r\n    }\r\n  }\r\n\r\n  private _createProgram(gl: WebGL2RenderingContext): WebGLProgram {\r\n    const program = gl.createProgram();\r\n\r\n    if (!program) throw `Error creating program`;\r\n\r\n    gl.attachShader(program, this.vertexShader.compileShader(gl));\r\n    gl.attachShader(program, this.fragmentShader.compileShader(gl));\r\n\r\n    gl.linkProgram(program);\r\n\r\n    if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      this._program = program;\r\n      return program;\r\n    }\r\n\r\n    const error = gl.getProgramInfoLog(program);\r\n    gl.deleteProgram(program);\r\n    throw error;\r\n  }\r\n\r\n  private _findVarLocations(gl: WebGL2RenderingContext) {\r\n    for (const variable of this.variables) {\r\n      if (variable.type == \"Uniform\") {\r\n        variable.location =\r\n          gl.getUniformLocation(this._program!, variable.fieldName) ??\r\n          undefined;\r\n\r\n        if (!variable.location)\r\n          throw `Error fetching uniform ${variable.fieldName}`;\r\n      } else if (variable.type == \"Attribute\") {\r\n        variable.location =\r\n          gl.getAttribLocation(this._program!, variable.fieldName) ?? undefined;\r\n\r\n        if (variable.location < 0)\r\n          throw `Error fetching attribute ${variable.fieldName}`;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport type MaterialVar = AttributeMaterialVar | UniformMaterialVar;\r\n\r\nexport type AttributeMaterialVar = {\r\n  fieldName: string;\r\n  name: VariableName;\r\n  location?: number;\r\n  type: \"Attribute\";\r\n};\r\n\r\nexport type UniformMaterialVar = {\r\n  fieldName: string;\r\n  name: VariableName;\r\n  location?: WebGLUniformLocation;\r\n  type: \"Uniform\";\r\n};\r\n\r\nexport enum VariableName {\r\n  Colour,\r\n  Position,\r\n  Resolution,\r\n}\r\n\r\nconst createRectangle = (\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): Float32Array => {\r\n  const x1 = x;\r\n  const x2 = x + width;\r\n  const y1 = y;\r\n  const y2 = y + height;\r\n\r\n  return new Float32Array([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]);\r\n};\r\n", "export class Shader {\r\n  private _compiledShader?: WebGLShader;\r\n  readonly source: string;\r\n  readonly type: ShaderType;\r\n\r\n  constructor({ source, type }: Partial<Shader>) {\r\n    if (!source) throw `Source cannot be null`;\r\n    if (!type) throw `Type cannot be null`;\r\n\r\n    this.source = source;\r\n    this.type = type;\r\n  }\r\n\r\n  get compiledShader(): WebGLShader | undefined {\r\n    return this._compiledShader;\r\n  }\r\n\r\n  compileShader(gl: WebGL2RenderingContext): WebGLShader {\r\n    const shader = gl.createShader(this.type);\r\n    if (!shader) throw `Error creating shader`;\r\n\r\n    gl.shaderSource(shader, this.source);\r\n    gl.compileShader(shader);\r\n\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      this._compiledShader = shader;\r\n      return shader;\r\n    }\r\n\r\n    const error = gl.getShaderInfoLog(shader);\r\n    gl.deleteShader(shader);\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport enum ShaderType {\r\n  \"Vertex\" = 0x8b31,\r\n  \"Fragment\" = 0x8b30,\r\n}\r\n", "import { Shader, ShaderType } from \"../shader\";\r\n\r\nconst shaderSource = `#version 300 es\r\n     \r\n// fragment shaders don't have a default precision so we need\r\n// to pick one. highp is a good default. It means \"high precision\"\r\nprecision highp float;\r\n \r\nuniform vec4 u_colour;\r\n\r\n// we need to declare an output for the fragment shader\r\nout vec4 outColour;\r\n \r\nvoid main() {\r\n  // Just set the output to a constant reddish-purple\r\n  outColour = u_colour;\r\n}`;\r\n\r\nexport const fragmentShader = new Shader({\r\n  source: shaderSource,\r\n  type: ShaderType.Fragment,\r\n});\r\n", "import { Shader, ShaderType } from \"../shader\";\r\n\r\nconst source = `#version 300 es\r\n \r\n// an attribute is an input (in) to a vertex shader.\r\n// It will receive data from a buffer\r\nin vec2 a_position;\r\n \r\nuniform vec2 u_resolution; \r\n// all shaders have a main function\r\nvoid main() {\r\n  // convert the position from pixels to 0.0 to 1.0\r\n  vec2 zeroToOne = a_position / u_resolution;\r\n\r\n  // convert from 0->1 to 0->2\r\n  vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n  // convert from 0->2 to -1->+1 (clip space)\r\n  vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n  // gl_Position is a special variable a vertex shader\r\n  // is responsible for setting\r\n  gl_Position = vec4(clipSpace, 0, 1);\r\n}`;\r\n\r\nexport const vertexShader = new Shader({\r\n  source: source,\r\n  type: ShaderType.Vertex,\r\n});\r\n", "import {\r\n  ControlledBy,\r\n  ControlledByComponent,\r\n} from \"./ecs/additions/components/controlled-by\";\r\nimport { Movement } from \"./ecs/additions/components/movement\";\r\nimport { createRectangle } from \"./ecs/additions/shape-factory\";\r\nimport { WebGlRenderer } from \"./ecs/additions/systems/WebGlRenderer\";\r\nimport { InputSystem } from \"./ecs/additions/systems/input\";\r\nimport { MovementSystem } from \"./ecs/additions/systems/movement\";\r\nimport { Engine } from \"./ecs/core/engine\";\r\nimport { Entity } from \"./ecs/core/entity\";\r\nimport { WebGl } from \"./webgl/main\";\r\nimport { Material, VariableName } from \"./webgl/material\";\r\nimport { fragmentShader } from \"./webgl/shaders/fragment\";\r\nimport { vertexShader } from \"./webgl/shaders/vertex\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n\r\nif (!canvas) throw `Couldn;'t find canvas`;\r\n\r\nconst materials: Material[] = [\r\n  new Material({\r\n    fragmentShader: fragmentShader,\r\n    name: \"Main\",\r\n    vertexShader: vertexShader,\r\n    variables: [\r\n      {\r\n        name: VariableName.Position,\r\n        fieldName: \"a_position\",\r\n        type: \"Attribute\",\r\n      },\r\n      {\r\n        name: VariableName.Colour,\r\n        fieldName: \"u_colour\",\r\n        type: \"Uniform\",\r\n      },\r\n      {\r\n        name: VariableName.Resolution,\r\n        fieldName: \"u_resolution\",\r\n        type: \"Uniform\",\r\n      },\r\n    ],\r\n  }),\r\n];\r\n\r\nconst webgl = new WebGl({ canvas, materials });\r\nwebgl.init();\r\n\r\nconst player = new Entity();\r\nplayer.name = \"Player\";\r\n\r\nfor (const component of createRectangle()) {\r\n  player.components.add(component);\r\n}\r\n\r\nplayer.components.add(new Movement({}));\r\nplayer.components.add(new ControlledByComponent(ControlledBy.Player));\r\n\r\nconst engine = new Engine();\r\nengine.entities.push(player);\r\nengine.systems.push(new InputSystem());\r\nengine.systems.push(new MovementSystem());\r\nengine.systems.push(new WebGlRenderer(webgl));\r\nengine.init();\r\n"],
  "mappings": "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",
  "names": ["Component", "name", "ControlledByComponent", "Component", "controlledBy", "lerp", "start", "end", "factor", "approxZero", "n", "lerpVector", "a", "b", "factor", "x", "lerp", "y", "addVector", "multiplyVector", "approxZeroVector", "approxZero", "MovementName", "Movement", "Component", "vector", "maxSpeed", "approxZero", "approxZeroVector", "addVector", "multiplyVector", "lerpVector", "negativeMaxSpeed", "Colour", "Component", "r", "g", "b", "a", "PositionName", "Position", "Component", "x", "y", "Size", "Component", "width", "height", "createRectangle", "Colour", "Position", "Size", "System", "entities", "getEntitiesForQuery", "system", "entity", "WebGlRenderer", "System", "webgl", "entity", "PositionName", "entities", "systems", "drawableEntities", "material", "InputSystem", "System", "entity", "component", "MovementName", "entities", "state", "xDirection", "yDirection", "movement", "positiveKey", "negativeKey", "up", "down", "event", "MovementSystem", "System", "entity", "PositionName", "MovementName", "entities", "position", "movement", "Renderer", "canvas", "_instance", "instance", "Engine", "instance", "entity", "system", "Components", "component", "name", "Entity", "Components", "component", "resizeCanvasToDisplaySize", "canvas", "dpr", "width", "height", "displayWidth", "displayHeight", "needResize", "WebGl", "canvas", "materials", "gl", "material", "resizeCanvasToDisplaySize", "Material", "fragmentShader", "name", "vertexShader", "variables", "variable", "position", "gl", "positionBuffer", "vao", "size", "type", "normalize", "stride", "offset", "entities", "entity", "PositionName", "colour", "rectangle", "createRectangle", "primitiveType", "count", "program", "error", "createRectangle", "x", "y", "width", "height", "x1", "x2", "y1", "y2", "Shader", "source", "type", "gl", "shader", "error", "shaderSource", "fragmentShader", "Shader", "source", "vertexShader", "Shader", "canvas", "materials", "Material", "fragmentShader", "vertexShader", "webgl", "WebGl", "player", "Entity", "component", "createRectangle", "Movement", "ControlledByComponent", "engine", "Engine", "InputSystem", "MovementSystem", "WebGlRenderer"]
}
